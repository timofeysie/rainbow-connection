{
  "_args": [
    [
      {
        "raw": "https://github.com/zapur1/xAPIWrapper.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "https://github.com/zapur1/xAPIWrapper.git",
        "spec": "git+https://github.com/zapur1/xAPIWrapper.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:zapur1/xAPIWrapper.git",
          "sshUrl": "git+ssh://git@github.com/zapur1/xAPIWrapper.git",
          "httpsUrl": "git+https://github.com/zapur1/xAPIWrapper.git",
          "gitUrl": "git://github.com/zapur1/xAPIWrapper.git",
          "shortcut": "github:zapur1/xAPIWrapper",
          "directUrl": "https://raw.githubusercontent.com/zapur1/xAPIWrapper/master/package.json"
        }
      },
      "/Users/tim/pi/rainbow-connection"
    ]
  ],
  "_from": "git+https://github.com/zapur1/xAPIWrapper.git",
  "_id": "xAPIWrapper@1.11.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/xAPIWrapper",
  "_phantomChildren": {},
  "_requested": {
    "raw": "https://github.com/zapur1/xAPIWrapper.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "https://github.com/zapur1/xAPIWrapper.git",
    "spec": "git+https://github.com/zapur1/xAPIWrapper.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:zapur1/xAPIWrapper.git",
      "sshUrl": "git+ssh://git@github.com/zapur1/xAPIWrapper.git",
      "httpsUrl": "git+https://github.com/zapur1/xAPIWrapper.git",
      "gitUrl": "git://github.com/zapur1/xAPIWrapper.git",
      "shortcut": "github:zapur1/xAPIWrapper",
      "directUrl": "https://raw.githubusercontent.com/zapur1/xAPIWrapper/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git+https://github.com/zapur1/xAPIWrapper.git#ac2f0dd2aabf03c35507c03e161eb3e473506981",
  "_shasum": "bb3eade61554cf0d8dd4241cfb773ac549b0e566",
  "_shrinkwrap": null,
  "_spec": "https://github.com/zapur1/xAPIWrapper.git",
  "_where": "/Users/tim/pi/rainbow-connection",
  "bugs": {
    "url": "https://github.com/adlnet/xAPIWrapper/issues"
  },
  "dependencies": {},
  "description": "An easier way to build, send, and retrieve xAPI statements",
  "devDependencies": {
    "blanket": "^1.2.3",
    "cryptojs": "^2.5.3",
    "doxstrap": "~0.0.5",
    "grunt": "~0.4.2",
    "grunt-bump": "0.0.16",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-exec": "~0.4.6",
    "grunt-webpack": "^1.0.14",
    "istanbul": "^0.4.5",
    "jquery": "^3.1.0",
    "mocha": "^3.0.2",
    "should": "^11.1.0",
    "webpack": "^1.13.2"
  },
  "gitHead": "ac2f0dd2aabf03c35507c03e161eb3e473506981",
  "homepage": "https://github.com/adlnet/xAPIWrapper#readme",
  "main": "./dist/xapiwrapper.min.js",
  "name": "xAPIWrapper",
  "optionalDependencies": {},
  "readme": "xAPIWrapper\n===========\n\nWrapper to simplify communication to an LRS. [Read more about the Experience API Spec here.](https://github.com/adlnet/xAPI-Spec/blob/master/xAPI.md)\n\nCheck out the [Reference Documentation Here](http://adlnet.github.io/xAPIWrapper/)\n\n### xapiwrapper.js\n\nJavascript Experience API wrapper.  \nThis javascript file can be included to web based xAPI clients to\nsimplify the process of connecting and communicating to an LRS. It\nis enclosed in an ADL object like the\n[ADL xAPI Verbs project](https://github.com/adlnet/xAPIVerbs), allowing\na single object to contain both the ADL verbs and the ADL xapiwrapper.\n\nThis wrapper has two version identifiers within the code. One, `xapiVersion`\nis the version of the Experience API Specification for which it was built,\nand can be used to determine if the wrapper is compatible with an LRS implementing a specific\nxAPI Specification version. The second is the build date in the header of the minified file,\nwhich can be used to tell if you're using the latest version.\n\n### Dependencies\nThe wrapper relies on external dependencies to perform some actions. Make sure you include\nour compilation of the necessary [CryptoJS](https://code.google.com/p/crypto-js/) components\nin your pages if you're not using `xapiwrapper.min.js`\n\n``` html\n<script type=\"text/javascript\" src=\"./lib/cryptojs_v3.1.2.js\"></script>\n```\n\nIn the past we used the below libraries for the same purpose. You may continue to use them\nfor current systems, but the CryptoJS compilation is recommended.\n\n* base64.js - https://code.google.com/p/javascriptbase64/downloads/list  \n* 2.5.3-crypto-sha1.js - https://code.google.com/p/crypto-js/downloads/detail?name=2.5.3-crypto-sha1.js&can=4&q=\n\n## Installing\n\nUsing this wrapper could either be done by downloading the [latest release](https://github.com/adlnet/xAPIWrapper#downloading-the-latest-release-version) or [cloning the project](https://github.com/adlnet/xAPIWrapper#cloning-and-building-the-project).\n\n### Downloading the latest release version\n\nThe minified wrapper is self-contained. It includes all required dependencies\nin addition to the ADL Verbs and the XAPIStatement module. For production sites,\nthis version of the wrapper is recommended.\n\nDownload the latest [release](https://github.com/adlnet/xAPIWrapper/releases)\n\nFollow the [instructions](https://github.com/adlnet/xAPIWrapper#including-in-your-software) for including the wrapper in your source files.\n\n### Cloning and building the project\n\nYou can optionally clone and use the `dist/xapiwrapper.min.js`:\n\n```bash\ngit clone https://github.com/adlnet/xAPIWrapper/\n```\n\n#### Building the project\n\nCompiling the minified version is easy. Install Node.js and NPM if you don't already have them\n(download them [here](http://nodejs.org/download/)). Then install the build system, Grunt. This\nmay require root/admin privileges on your system.\n\n```bash\n$ sudo npm install -g grunt\n```\n\nInstall the xAPIWrapper dependencies:\n\n```bash\n$ npm install\n```\n\nThen execute the build script:\n\n```bash\n$ grunt\n```\n\nThis will overwrite `dist/xapiwrapper.min.js` with the minifed versions of the wrapper and all its\ndependencies.\n\n#### Including in your Software.\n\nInclude the wrapper file, and optionally the dependencies.\n\n``` html\n<script type=\"text/javascript\" src=\"./lib/cryptojs_v3.1.2.js\"></script>\n<script type=\"text/javascript\" src=\"./src/verbs.js\"></script>\n<script type=\"text/javascript\" src=\"./src/xapistatement.js\"></script>\n<script type=\"text/javascript\" src=\"./src/xapiwrapper.js\"></script>\n```\n\nAlternatively, use the minified version:\n\n``` html\n<script type=\"text/javascript\" src=\"./dist/xapiwrapper.min.js\"></script>\n```\n\n\n### Configuration\nThe wrapper at a minimum needs to know the url of the LRS, though\nmost cases will also require the authorization information as well.\n\nThis wrapper provides two options for configuration. You may:  \n* Edit the configuration object (`Config`) in the xapiwrapper.js file\n\n```JavaScript\nvar Config = function()\n{\n    var conf = {};\n    conf['endpoint'] = \"http://localhost:8000/xapi/\";\n    try\n    {\n        conf['auth'] = \"Basic \" + toBase64('tom:1234');\n    }\n    catch (e)\n    {\n        log(\"Exception in Config trying to encode auth: \" + e);\n    }\n\n    // Statement defaults [optional configuration]\n    // conf[\"actor\"] = {\"mbox\":\"default@example.com\"};\n    // conf[\"registration\"] =  ruuid();\n    // conf[\"grouping\"] = {\"id\":\"ctxact:default/grouping\"};\n    // conf[\"activity_platform\"] = \"default platform\";\n    return conf\n}();\n```  \n* Create your own configuration object and pass it to the xapiwrapper object\n\n```JavaScript\nvar conf = {\n  \"endpoint\" : \"https://lrs.adlnet.gov/xapi/\",\n  \"auth\" : \"Basic \" + toBase64('tom:1234'),\n};\nADL.XAPIWrapper.changeConfig(conf);\n```  \nOptionally, auth credentials can be updated by user and password properties on the\nconfiguration object:  \n\n```JavaScript\nvar conf = {\n  \"endpoint\" : \"https://lrs.adlnet.gov/xapi/\",\n  \"user\" : \"tom\",\n  \"password\" : \"1234\",\n};\nADL.XAPIWrapper.changeConfig(conf);\n```  \nor  \n\n```JavaScript\nvar creds = {\n  \"user\" : \"tom\",\n  \"password\" : \"1234\",\n};\nADL.XAPIWrapper.updateAuth(ADL.XAPIWrapper.lrs, creds.user, creds.password);\n```  \n\nThe script automatically runs, creating or adding to an ADL object an\ninstantiated xAPI Wrapper object. The object is created using the\nconfiguration object inside the xapiwrapper.js file. If you modified this\nobject with your configuration, then xAPI Wrapper object is ready to use.\n\n``` shell\nADL.XAPIWrapper.testConfig();\n>> true\n```\n\n#### Launch Parameters\nThe configuration will also look for url query parameters and use those\nname - value pairs in the XAPIWrapper's internal configuration. That means\nthat `http://localhost:8000/content/example.html?actor={\"mbox\":\"mailto:tom@example.com\"}`  \n(not url encoded for illustrative purposes) would be parsed for an actor,\nwhich would automatically be included in the wrapper configuration.  \n__NOTE:__ endpoint, auth, actor, registration, activity_id, grouping, and activity_platform\nare keywords that if found are used in send statement requests. See below for\nusage examples.\n\n#### Logging  \nThe wrapper comes with a logging function (`ADL.XAPIWrapper.log(message)`)\nwhich attempts to write a message to console.log. This can be configured\nto not write messages by setting `log.debug = false;`.\n\n#### xAPI Launch support\nThe xAPI Wrapper supports [ADL's xAPI Launch](https://github.com/adlnet/xapi-launch).\nThis allows configuration - agent info, lrs endpoint info - to be sent to the wrapper,\ninstead of using hard-coded configurations. See [Using the xAPI-Launch library](https://github.com/adlnet/xapi-launch#using-the-xapi-launch-library) for\nmore details.  \n\nIf you are using the src files, include xapi-launch.js.  \n\n``` html\n<script type=\"text/javascript\" src=\"./lib/cryptojs_v3.1.2.js\"></script>\n<script type=\"text/javascript\" src=\"./src/verbs.js\"></script>\n<script type=\"text/javascript\" src=\"./src/xapi-launch.js\"></script>\n<script type=\"text/javascript\" src=\"./src/xapistatement.js\"></script>\n<script type=\"text/javascript\" src=\"./src/xapiwrapper.js\"></script>\n```\n\nAlternatively, use the minified xapiwrapper version, which includes xapi-launch:\n\n``` html\n<script type=\"text/javascript\" src=\"./dist/xapiwrapper.min.js\"></script>\n```  \n\nTo use, construct and ADL.launch object passing in a callback.  \n\n``` javascript\nvar wrapper;\nADL.launch(function(err, launchdata, xAPIWrapper) {\n    if (!err) {\n        wrapper = xAPIWrapper;\n        console.log(\"--- content launched via xAPI Launch ---\\n\", wrapper.lrs, \"\\n\", launchdata);\n    } else {\n        wrapper = ADL.XAPIWrapper;\n        wrapper.changeConfig({\n            endpoint: \"https://lrs.adlnet.gov/xapi/\",\n            user: 'tom',\n            password: '1234'\n        });\n        console.log(\"--- content statically configured ---\\n\", wrapper.lrs);\n    }\n    $('#endpoint').text(wrapper.lrs.endpoint);\n}, true);\n```  \n\n### Use\n\n#### Statements\n\n##### Statement Object (xapistatement.js)\n\n```JavaScript\nnew ADL.XAPIStatement(actor, verb, object)\nnew ADL.XAPIStatement.Agent(identifier, name)\nnew ADL.XAPIStatement.Group(identifier, members, name)\nnew ADL.XAPIStatement.Verb(id, description)\nnew ADL.XAPIStatement.Activity(id, name, description)\nnew ADL.XAPIStatement.StatementRef(uuid)\nnew ADL.XAPIStatement.SubStatement(actor, verb, object)\n```\n\nThis sub-API makes it easier to author valid xAPI statements\nby adding constructors and encouraging best practices. All objects in this\nAPI are fully JSON-compatible, so anything expecting an xAPI statement can\ntake an improved statement and vice versa.\n\nIn addition to the above forms, each constructor can instead take as an argument\nanother instance of the object or the equivalent plain object. So you can convert\na plain xAPI statement to an improved one by calling `new XAPIStatement(plain_obj)`.\n\n###### Building a Simple \"I Did This\"\n\nPassing in strings produces a default form: Agent Verb Activity.\n\n```JavaScript\nvar stmt = new ADL.XAPIStatement(\n\t'mailto:steve.vergenz.ctr@adlnet.gov',\n\t'http://adlnet.gov/expapi/verbs/launched',\n\t'http://vwf.adlnet.gov/xapi/virtual_world_sandbox'\n);\n>> {\n\t\"actor\": {\n\t\t\"objectType\": \"Agent\",\n\t\t\"mbox\": \"mailto:steve.vergenz.ctr@adlnet.gov\" },\n\t\"verb\": {\n\t\t\"id\": \"http://adlnet.gov/expapi/verbs/launched\" },\n\t\"object\": {\n\t\t\"objectType\": \"Activity\",\n\t\t\"id\": \"http://vwf.adlnet.gov/xapi/virtual_world_sandbox\" }}\n```\n\n###### Adding Descriptors\n\n```JavaScript\nvar stmt = new ADL.XAPIStatement(\n\tnew ADL.XAPIStatement.Agent(ADL.XAPIWrapper.hash('mailto:steve.vergenz.ctr@adlnet.gov'), 'Steven Vergenz'),\n\tnew ADL.XAPIStatement.Verb('http://adlnet.gov/expapi/verbs/launched', 'launched'),\n\tnew ADL.XAPIStatement.Activity('http://vwf.adlnet.gov/xapi/virtual_world_sandbox', 'the Virtual World Sandbox')\n);\n>> {\n\t\"actor\": {\n\t\t\"objectType\": \"Agent\",\n\t\t\"name\": \"Steven Vergenz\",\n\t\t\"mbox_sha1sum\": \"f9fa1a084b2b0825cabb802fcc1bb6024141eee2\" },\n\t\"verb\": {\n\t\t\"id\": \"http://adlnet.gov/expapi/verbs/launched\",\n\t\t\"display\": {\n\t\t\t\"en-US\": \"launched\" }},\n\t\"object\": {\n\t\t\"objectType\": \"Activity\",\n\t\t\"id\": \"http://vwf.adlnet.gov/xapi/virtual_world_sandbox\",\n\t\t\"definition\": {\n\t\t\t\"name\": {\n\t\t\t\t\"en-US\": \"the Virtual World Sandbox\" }}}}\n```\n\n###### Adding Additional Fields\n\nYou can mix generated and manual fields without any conflicts.\n\n```JavaScript\nvar stmt = new ADL.XAPIStatement(\n\t'mailto:steve.vergenz.ctr@adlnet.gov',\n\t'http://adlnet.gov/expapi/verbs/launched',\n\t'http://vwf.adlnet.gov/xapi/virtual_world_sandbox'\n);\nstmt.generateId();\nstmt.result = { 'response': 'Everything is a-okay!' };\n>> {\n\t\"actor\": {\n\t\t\"objectType\": \"Agent\",\n\t\t\"mbox\": \"mailto:steve.vergenz.ctr@adlnet.gov\" },\n\t\"verb\": {\n\t\t\"id\": \"http://adlnet.gov/expapi/verbs/launched\" },\n\t\"object\": {\n\t\t\"objectType\": \"Activity\",\n\t\t\"id\": \"http://vwf.adlnet.gov/xapi/virtual_world_sandbox\" },\n\t\"id\": \"d60ffbaa-52af-44b6-932d-c08865c540ff\",\n\t\"result\": {\n\t\t\"response\": \"Everything is a-okay!\" }}\n```\n\n###### Using Multiple Languages\n\nAny of the `name` or `description` fields in the constructors can instead take a language map,\nas defined in the xAPI specification.\n\n```JavaScript\nvar stmt = new ADL.XAPIStatement();\nstmt.actor = new ADL.XAPIStatement.Agent('https://plus.google.com/113407910174370737235');\nstmt.verb = new ADL.XAPIStatement.Verb(\n\t'http://adlnet.gov/expapi/verbs/launched',\n\t{\n\t\t'en-US': 'launched',\n\t\t'de-DE': 'startete'\n\t}\n);\nstmt.object = new ADL.XAPIStatement.Activity('http://vwf.adlnet.gov/xapi/virtual_world_sandbox');\n>> {\n\t\"actor\": {\n\t\t\"objectType\": \"Agent\",\n\t\t\"openid\": \"https://plus.google.com/113407910174370737235\" },\n\t\"verb\": {\n\t\t\"id\": \"http://adlnet.gov/expapi/verbs/launched\",\n\t\t\"display\": {\n\t\t\t\"en-US\": \"launched\",\n\t\t\t\"de-DE\": \"startete\" }},\n\t\"object\": {\n\t\t\"objectType\": \"Activity\",\n\t\t\"id\": \"http://vwf.adlnet.gov/xapi/virtual_world_sandbox\" }}\n```\n\n###### Using an ADL Verb\n\nManually specified verbs have been used until now for illustrative purposes, but you could just\nas easily use the ADL verbs.\n\n```JavaScript\nvar stmt = ADL.XAPIStatement(myactor, ADL.verbs.launched, myactivity);\n```\n\n##### Send Statement\n`function sendStatement(statement, callback)`  \nSends a single Statement to the LRS using a PUT request. This\nmethod will automatically create the Statement ID. Providing a\nfunction to call after the send Statement request will make\nthe request happen asynchronously, otherwise Send Statement\nwill block until it receives the response from the LRS.  \n###### Send Statement without Callback\n\n```JavaScript\nvar stmt = {\"actor\" : {\"mbox\" : \"mailto:tom@example.com\"},\n            \"verb\" : {\"id\" : \"http://adlnet.gov/expapi/verbs/answered\",\n                      \"display\" : {\"en-US\" : \"answered\"}},\n            \"object\" : {\"id\" : \"http://adlnet.gov/expapi/activities/question\"}};\nvar resp_obj = ADL.XAPIWrapper.sendStatement(stmt);\nADL.XAPIWrapper.log(\"[\" + resp_obj.id + \"]: \" + resp_obj.xhr.status + \" - \" + resp_obj.xhr.statusText);\n>> [3e616d1c-5394-42dc-a3aa-29414f8f0dfe]: 200 - OK\n```\n###### Send Statement with Callback\n\n```JavaScript\nvar stmt = {\"actor\" : {\"mbox\" : \"mailto:tom@example.com\"},\n            \"verb\" : {\"id\" : \"http://adlnet.gov/expapi/verbs/answered\",\n                      \"display\" : {\"en-US\" : \"answered\"}},\n            \"object\" : {\"id\" : \"http://adlnet.gov/expapi/activities/question\"}};\nADL.XAPIWrapper.sendStatement(stmt, function(resp, obj){  \n    ADL.XAPIWrapper.log(\"[\" + obj.id + \"]: \" + resp.status + \" - \" + resp.statusText);});\n>> [4edfe763-8b84-41f1-a355-78b7601a6fe8]: 200 - OK\n```\n\n###### Send Statement with URL query string values\nThe wrapper looks for URL query string values to include in\nits internal configuration. If certain keys\n(\"endpoint\",\"auth\",\"actor\",\"registration\",\"activity_id\", \"grouping\", \"activity_platform\")\nare found, the values are included in a Statement.  \n_URL_  \n` http://localhost:8000/content/example.html?registration=51a6f860-1997-11e3-8ffd-0800200c9a66 `  \n_Client Calls_\n\n```JavaScript\nvar stmt = {\"actor\" : {\"mbox\" : \"mailto:tom@example.com\"},\n            \"verb\" : {\"id\" : \"http://adlnet.gov/expapi/verbs/answered\",\n                      \"display\" : {\"en-US\" : \"answered\"}},\n            \"object\" : {\"id\" : \"http://adlnet.gov/expapi/activities/question\"}};\nvar resp_obj = ADL.XAPIWrapper.sendStatement(stmt);\nADL.XAPIWrapper.getStatements({\"statementId\":resp_obj.id});\n>> {\"version\": \"1.0.0\",\n    \"timestamp\": \"2013-09-09 21:36:40.185841+00:00\",\n    \"object\": {\"id\": \"http://adlnet.gov/expapi/activities/question\", \"objectType\": \"Activity\"},\n    \"actor\": {\"mbox\": \"mailto:tom@example.com\", \"name\": \"tom creighton\", \"objectType\": \"Agent\"},\n    \"stored\": \"2013-09-09 21:36:40.186124+00:00\",\n    \"verb\": {\"id\": \"http://adlnet.gov/expapi/verbs/answered\", \"display\": {\"en-US\": \"answered\"}},\n    \"authority\": {\"mbox\": \"mailto:tom@adlnet.gov\", \"name\": \"tom\", \"objectType\": \"Agent\"},\n>   \"context\": {\"registration\": \"51a6f860-1997-11e3-8ffd-0800200c9a66\"},\n    \"id\": \"ea9c1d01-0606-4ec7-8e5d-20f87b1211ed\"}\n```\n\n###### Send Statement with ADL xAPI Verbs\nADL also has collected the [ADL xAPI Verbs](https://github.com/adlnet/xAPIVerbs)\ninto a Javascript object to easily include. To use...  \n_Include verbs.js_  \n`<script type=\"text/javascript\" src=\"./src/verbs.js\"></script>`  \n_Client Calls_  \n\n```JavaScript\nvar stmt = {\"actor\" : {\"mbox\" : \"mailto:tom@example.com\"},\n            \"verb\" : ADL.verbs.answered,\n            \"object\" : {\"id\" : \"http://adlnet.gov/expapi/activities/question\"}};\nvar resp_obj = ADL.XAPIWrapper.sendStatement(stmt);\nADL.XAPIWrapper.getStatements({\"statementId\":resp_obj.id});\n>> {\"version\": \"1.0.0\",\n    \"timestamp\": \"2013-09-09 22:08:51.440327+00:00\",\n    \"object\": {\"id\": \"http://adlnet.gov/expapi/activities/question\", \"objectType\": \"Activity\"},\n    \"actor\": {\"mbox\": \"mailto:tom@example.com\", \"name\": \"tom creighton\", \"objectType\": \"Agent\"},\n    \"stored\": \"2013-09-09 22:08:51.440614+00:00\",\n>   \"verb\": {\"id\": \"http://adlnet.gov/expapi/verbs/answered\", \"display\": {\"en-US\": \"answered\"}},\n    \"authority\": {\"mbox\": \"mailto:tom@adlnet.gov\", \"name\": \"tom\", \"objectType\": \"Agent\"},\n    \"id\": \"9c5a910b-83c2-4114-84f5-d41ed790f8cf\"}\n```\n\n###### Send Statement with XAPIStatement\n\nBy including _xapistatement.js_, you gain access to a convenience wrapper to ease the building\nof xAPI statements without a lot of the formatting fluff.\n\n```JavaScript\nvar stmt = new ADL.XAPIStatement(\"mailto:tom@example.com\", null, \"http://adlnet.gov/expapi/activities/question\");\nstmt.verb = new ADL.XAPIStatement.Verb(\"http://adlnet.gov/expapi/verbs/answered\", \"answered\");\nstmt.generateId();\nADL.XAPIWrapper.sendStatement(stmt);\nADL.XAPIWrapper.getStatements({\"statementId\": stmt.id});\n>> {\"version\": \"1.0.0\",\n    \"timestamp\": \"2013-09-09 22:08:51.440327+00:00\",\n    \"object\": {\"id\": \"http://adlnet.gov/expapi/activities/question\", \"objectType\": \"Activity\"},\n    \"actor\": {\"mbox\": \"mailto:tom@example.com\", \"objectType\": \"Agent\"},\n    \"stored\": \"2013-09-09 22:08:51.440614+00:00\",\n>   \"verb\": {\"id\": \"http://adlnet.gov/expapi/verbs/answered\", \"display\": {\"en-US\": \"answered\"}},\n    \"authority\": {\"mbox\": \"mailto:tom@adlnet.gov\", \"name\": \"tom\", \"objectType\": \"Agent\"},\n    \"id\": \"9c5a910b-83c2-4114-84f5-d41ed790f8cf\"}\n```\n\n##### Send Statements\n`function sendStatements(statementArray, callback)`  \nSends a list of Statements to the LRS in one batch. It\naccepts the list of Statements and a callback function as\narguments and returns the XHR request object if no callback\nis supplied. The response of the XHR request upon success will\ncontain a list of Statement IDs.\n\n###### Send Statements without callback\n\n```JavaScript\nvar stmt = {\"actor\" : {\"mbox\" : \"mailto:tom@example.com\"},\n            \"verb\" : ADL.verbs.answered,\n            \"object\" : {\"id\" : \"http://adlnet.gov/expapi/activities/question/1\"}};\nvar stmt2 = {\"actor\" : {\"mbox\" : \"mailto:tom@example.com\"},\n            \"verb\" : ADL.verbs.answered,\n            \"object\" : {\"id\" : \"http://adlnet.gov/expapi/activities/question/2\"}};\nvar stmts = [stmt, stmt2];\nvar r = ADL.XAPIWrapper.sendStatements(stmts);\nJSON.parse(r.response)\n>> [\"2d819ea4-1a1e-11e3-a888-08002787eb49\", \"409c27de-1a1e-11e3-a888-08002787eb49\"]\n```\n\n###### Send Statements with callback\n\n```JavaScript\nvar stmt = {\"actor\" : {\"mbox\" : \"mailto:tom@example.com\"},\n            \"verb\" : ADL.verbs.answered,\n            \"object\" : {\"id\" : \"http://adlnet.gov/expapi/activities/question/1\"}};\nvar stmt2 = {\"actor\" : {\"mbox\" : \"mailto:tom@example.com\"},\n            \"verb\" : ADL.verbs.answered,\n            \"object\" : {\"id\" : \"http://adlnet.gov/expapi/activities/question/2\"}};\nvar stmts = [stmt, stmt2];\nADL.XAPIWrapper.sendStatements(stmts, function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> [\"2d819ea4-1a1e-11e3-a888-08002787eb49\", \"409c27de-1a1e-11e3-a888-08002787eb49\"]\n```\n\n##### Get Statements\n`function getStatements(searchParams, more, callback)`  \nGet a single or collection of Statements based on\nsearch parameters or a StatementResult more value.\n\n###### Get all Statements without callback\nThis could be potentially a very large request. It is preferable to include\na search parameter object to narrow down the StatementResult set. However,\nthis call is included to support report style pages.\n\n```JavaScript\nvar ret = ADL.XAPIWrapper.getStatements();\nif (ret)\n   ADL.XAPIWrapper.log(ret.statements);\n\n>> <Array of statements>\n```\n\n###### Get all Statements with callback\n\n```JavaScript\nADL.XAPIWrapper.getStatements(null, null,\n        function(r){ADL.XAPIWrapper.log(JSON.parse(r.response).statements);});\n>> <Array of statements>\n```\n\n###### Use the more property to get more Statements\n\n```JavaScript\nvar res = ADL.XAPIWrapper.getStatements();\nADL.XAPIWrapper.log(res.statements);\n>> <Array of statements>\n\nif (res.more && res.more !== \"\"){\n   var more = ADL.XAPIWrapper.getStatements(null, res.more);\n   ADL.XAPIWrapper.log(more.statements);\n}\n>> <Array of statements>\n```\n\n###### Use the more property to get more Statements with callback\n\n```JavaScript\nADL.XAPIWrapper.getStatements(null, null,\n   function getmore(r){\n      var res = JSON.parse(r.response);\n      ADL.XAPIWrapper.log(res.statements);\n      if (res.more && res.more !== \"\"){\n         ADL.XAPIWrapper.getStatements(null, res.more, getmore);\n      }\n   });\n>> <Array of statements>\n>> <Array of statements>\n...\n```\n\n###### Get Statements based on search parameters\nThe Experience API provides search parameters to narrow down\nthe result of a Statement request. See the [Experience API Spec](https://github.com/adlnet/xAPI-Spec/blob/master/xAPI.md#723-getstatements)\nfor more information.\n\n```JavaScript\nvar search = ADL.XAPIWrapper.searchParams();\nsearch['verb'] = ADL.verbs.answered.id;\nvar res = ADL.XAPIWrapper.getStatements(search);\nADL.XAPIWrapper.log(res.statements);\n>> <Array of statements with verb id of \"http://adlnet.gov/expapi/verbs/answered\">\n```  \n\n```JavaScript\nvar search = ADL.XAPIWrapper.searchParams();\nsearch['verb'] = ADL.verbs.terminated.id;\nsearch['activity'] = \"http://adlnet.gov/courses/roses/posttest\";\nsearch['related_activities'] = \"true\";\nvar res = ADL.XAPIWrapper.getStatements(search);\nADL.XAPIWrapper.log(res.statements);\n>> <Array of statements with verb id of \"http://adlnet.gov/expapi/verbs/terminated\" and an activity id of \"http://adlnet.gov/courses/roses/posttest\" in the statement>\n```\n\n#### Activities\n##### Get Activity\n`function getActivities(activityid, callback)`\nGet the Activity object from the LRS by providing an Activity ID.\n\n###### Get Activity without callback\n\n```JavaScript\nvar res = ADL.XAPIWrapper.getActivities(\"http://adlnet.gov/expapi/activities/question\");\nADL.XAPIWrapper.log(res);\n>> <Activity object>\n```\n\n###### Get Activity with callback\n\n```JavaScript\nADL.XAPIWrapper.getActivities(\"http://adlnet.gov/expapi/activities/question\",\n                         function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> <Activity object>\n```\n\n##### Activity State\n`function sendState(activityid, agent, stateid, registration, statevalue, matchHash, noneMatchHash, callback)`  \n`function getState(activityid, agent, stateid, registration, since, callback)`  \n`function deleteState(activityid, agent, stateid, registration, matchHash, noneMatchHash, callback)`\nSave / Retrieve / Delete activity state information for a particular agent, and optional registration.\n\n###### Send / Retrieve New Activity State\n\n```JavaScript\nvar stateval = {\"info\":\"the state info\"};\nADL.XAPIWrapper.sendState(\"http://adlnet.gov/expapi/activities/question\",\n                          {\"mbox\":\"mailto:tom@example.com\"},\n                          \"questionstate\", null, stateval);\nADL.XAPIWrapper.getState(\"http://adlnet.gov/expapi/activities/question\",\n                        {\"mbox\":\"mailto:tom@example.com\"}, \"questionstate\");\n>> {info: \"the state info\"}\n```\n\n###### Change Activity State\n\n```JavaScript\nvar oldstateval = {\"info\":\"the state info\"};\nvar newstateval = {\"info\":\"the new value\"};\nADL.XAPIWrapper.sendState(\"http://adlnet.gov/expapi/activities/question\",\n                          {\"mbox\":\"mailto:tom@example.com\"},\n                          \"questionstate\", null, newstateval,\n                          ADL.XAPIWrapper.hash(JSON.stringify(oldstateval)));\nADL.XAPIWrapper.getState(\"http://adlnet.gov/expapi/activities/question\",\n                        {\"mbox\":\"mailto:tom@example.com\"}, \"questionstate\",\n                        null, null, function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> {info: \"the new value\"}\n```\n\n###### Get all states for given Activity and Agent\n\n```JavaScript\nvar anotherstate = {\"more\": \"info about act and agent\"};\nADL.XAPIWrapper.sendState(\"http://adlnet.gov/expapi/activities/question\",\n                          {\"mbox\":\"mailto:tom@example.com\"},\n                          \"another_state\", null, anotherstate);\nvar states = ADL.XAPIWrapper.getState(\"http://adlnet.gov/expapi/activities/question\",\n                        {\"mbox\":\"mailto:tom@example.com\"});\nADL.XAPIWrapper.log(states);\n>> [\"another_state\", \"questionstate\"]\n```\n\n###### Get states for given Activity and Agent since a certain time\n\n```JavaScript\nvar actid = \"tag:adlnet.gov,2013:expapi:1.0.0:activity:question/1\";\nvar stateval = {\"info\":\"the state info\"};\nvar statehash = ADL.XAPIWrapper.hash(JSON.stringify(stateval));\nADL.XAPIWrapper.sendState(actid, {\"mbox\":\"mailto:tom@example.com\"}, \"questionstate\", null, stateval);\nvar stateret = ADL.XAPIWrapper.getState(actid, {\"mbox\":\"mailto:tom@example.com\"}, \"questionstate\");\nADL.XAPIWrapper.log(stateret);\n>> {\"info\":\"the state info\"}\n\nvar sincehere = new Date();\nvar anotherstate = {\"more\": \"info about act and agent\",\"other\":\"stuff\"};\nADL.XAPIWrapper.sendState(actid, {\"mbox\":\"mailto:tom@example.com\"}, \"another_state\", null, anotherstate);\nvar states = ADL.XAPIWrapper.getState(actid, {\"mbox\":\"mailto:tom@example.com\"});\nADL.XAPIWrapper.log(states);\n>> [\"questionstate\", \"another_state\"]\n\nvar states = ADL.XAPIWrapper.getState(actid, {\"mbox\":\"mailto:tom@example.com\"}, null, null, sincehere);\nADL.XAPIWrapper.log(states);\n>> [\"another_state\"]\n```\n\n###### Delete Activity State\n\n```javascript\nvar stateval = {\"info\":\"the state info\"};\nADL.XAPIWrapper.sendState(\"http://adlnet.gov/expapi/activities/question\",\n                          {\"mbox\":\"mailto:tom@example.com\"},\n                          \"questionstate\", null, stateval);\nADL.XAPIWrapper.getState(\"http://adlnet.gov/expapi/activities/question\",\n                        {\"mbox\":\"mailto:tom@example.com\"}, \"questionstate\");\n>> {info: \"the state info\"}\n\nADL.XAPIWrapper.deleteState(\"http://adlnet.gov/expapi/activities/question\",\n                        {\"mbox\":\"mailto:tom@example.com\"}, \"questionstate\");\n>> XMLHttpRequest {statusText: \"NO CONTENT\", status: 204, response: \"\", responseType: \"\", responseXML: null…}\n\nADL.XAPIWrapper.getState(\"http://adlnet.gov/expapi/activities/question\",\n                        {\"mbox\":\"mailto:tom@example.com\"}, \"questionstate\");\n>> 404\n```\n\n##### Activity Profile\n`function sendActivityProfile(activityid, profileid, profilevalue, matchHash, noneMatchHash, callback)`  \n`function getActivityProfile(activityid, profileid, since, callback)`  \n`function deleteActivityProfile(activityid, profileid, matchHash, noneMatchHash, callback)`  \nAllows for the storage, retrieval and deletion of data about an Activity.\n\n###### Send / Retrieve New Activity Profile\n\n```JavaScript\nvar profile = {\"info\":\"the profile\"};\nADL.XAPIWrapper.sendActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                                    \"actprofile\", profile, null, \"*\");\nADL.XAPIWrapper.getActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                                  \"actprofile\", null,\n                                  function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> {info: \"the profile\"}\n```\n\n###### Update Activity Profile\n\n```JavaScript\nvar profile = ADL.XAPIWrapper.getActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                                                 \"actprofile\");\nvar oldprofhash = ADL.XAPIWrapper.hash(JSON.stringify(profile));\nprofile['new'] = \"changes to profile\";\nADL.XAPIWrapper.sendActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                                    \"actprofile\", profile, oldprofhash);\nADL.XAPIWrapper.getActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                                  \"actprofile\", null,\n                                  function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> {info: \"the profile\", new: \"changes to profile\"}\n```\n\n###### Get all profiles about a specific Activity\n\n```JavaScript\nvar profile = {\"info\":\"the profile\"};\nADL.XAPIWrapper.sendActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                                    \"otheractprofile\", profile, null, \"*\");\nADL.XAPIWrapper.getActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                                  null, null,\n                                  function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> [\"otheractprofile\", \"actprofile\"]\n```\n\n###### Get profiles about an Activity since a certain time\n\n```JavaScript\nvar actid = \"tag:adlnet.gov,2013:expapi:1.0.0:activity:testing/xapiwrapper/activityprofile\";\nvar profid = \"testprofile\";\nvar actprof = {\"info\":\"the activity profile info\"};\nvar actprofhash = ADL.XAPIWrapper.hash(JSON.stringify(actprof));\n\nADL.XAPIWrapper.sendActivityProfile(actid, profid, actprof, null, actprofhash);\nvar actprofret = ADL.XAPIWrapper.getActivityProfile(actid, profid);\n\nADL.XAPIWrapper.log(actprofret);\n>> {\"info\": \"the activity profile info\"}\n\nvar since = new Date();\n\nvar newprofid = \"new-profile\";\nvar profile = {\"info\":\"the profile\"};\n\nADL.XAPIWrapper.sendActivityProfile(actid, newprofid, profile, null, \"*\");\nvar profiles = ADL.XAPIWrapper.getActivityProfile(actid, null, since);\n\nADL.XAPIWrapper.log(profiles);\n>> [\"new-profile\"]\n```\n\n###### Delete Activity Profile\n\n```javascript\nvar profile = {\"info\":\"the profile\"};\nADL.XAPIWrapper.sendActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                                    \"actprofile\", profile, null, \"*\");\nADL.XAPIWrapper.getActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                                  \"actprofile\", null,\n                                  function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> {info: \"the profile\"}\n\nADL.XAPIWrapper.deleteActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                        \"actprofile\");\n>> XMLHttpRequest {statusText: \"NO CONTENT\", status: 204, response: \"\", responseType: \"\", responseXML: null…}\n\nADL.XAPIWrapper.getActivityProfile(\"http://adlnet.gov/expapi/activities/question\",\n                                  \"actprofile\");\n>> 404\n```\n\n#### Agents\n##### Get Agent\n`function getAgents(agent, callback)`  \nGets a special Person object containing all the values\nof an Agent the LRS knows about. The Person object's\nidentifying properties are arrays and it may have more\nthan one identifier. [See more about Person in the spec](https://github.com/adlnet/xAPI-Spec/blob/master/xAPI.md#getagents)\n###### Get Agent without callback\n\n```JavaScript\nvar res = ADL.XAPIWrapper.getAgents({\"mbox\":\"mailto:tom@example.com\"});\nADL.XAPIWrapper.log(res);\n>> <Person object>\n```\n\n###### Get Agent with callback\n\n```JavaScript\nADL.XAPIWrapper.getAgents({\"mbox\":\"mailto:tom@example.com\"},\n                         function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> <Person object>\n```\n\n##### Agent Profile\n`function sendAgentProfile(agent, profileid, profilevalue, matchHash, noneMatchHash, callback)`  \n`function getAgentProfile(agent, profileid, since, callback)`  \n`function deleteAgentProfile(agent, profileid, matchHash, noneMatchHash, callback)`  \nAllows for the storage, retrieval and deletion of data about an Agent.\n\n###### Send / Retrieve New Agent Profile\n\n```JavaScript\nvar profile = {\"info\":\"the agent profile\"};\nADL.XAPIWrapper.sendAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                                  \"agentprofile\", profile, null, \"*\");\nADL.XAPIWrapper.getAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                                 \"agentprofile\", null,\n                                 function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> {info: \"the agent profile\"}\n```\n\n###### Update Agent Profile\n\n```JavaScript\nvar profile = ADL.XAPIWrapper.getAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                                               \"agentprofile\");\nvar oldprofhash = ADL.XAPIWrapper.hash(JSON.stringify(profile));\nprofile['new'] = \"changes to the agent profile\";\nADL.XAPIWrapper.sendAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                                  \"agentprofile\", profile, oldprofhash);\nADL.XAPIWrapper.getAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                                 \"agentprofile\", null,\n                                 function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> {info: \"the agent profile\", new: \"changes to the agent profile\"}\n```\n\n###### Get all profiles about a specific Agent\n\n```JavaScript\nvar profile = {\"info\":\"the agent profile\"};\nADL.XAPIWrapper.sendAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                                  \"othergentprofile\", profile, null, \"*\");\nADL.XAPIWrapper.getAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                                 null, null,\n                                 function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> [\"otheragentprofile\", \"agentprofile\"]\n```\n\n###### Get profiles about an Agent since a certain time\n\n```JavaScript\nvar otheragent = {\"mbox\":\"mailto:tom@example.com\"};\nvar profile = {\"info\":\"the other agent profile\"};\nvar otherprofid = \"the-other-profile-id\";\n\nADL.XAPIWrapper.sendAgentProfile(otheragent, otherprofid, profile, null, \"*\");\n\nvar since = new Date();\nvar newprof = {\"info\":\"the new other agent profile\"};\nvar newotherprofid = \"the-new-other-profile-id\";\n\nADL.XAPIWrapper.sendAgentProfile(otheragent, newotherprofid, newprof, null, \"*\");\nvar sinceprofiles = ADL.XAPIWrapper.getAgentProfile(otheragent, null, since);\n\nADL.XAPIWrapper.log(sinceprofiles);\n>> [\"the-new-other-profile-id\"]\n```\n\n###### Delete Agent Profile\n\n```javascript\nvar profile = {\"info\":\"the agent profile\"};\nADL.XAPIWrapper.sendAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                                  \"agentprofile\", profile, null, \"*\");\nADL.XAPIWrapper.getAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                                 \"agentprofile\", null,\n                                 function(r){ADL.XAPIWrapper.log(JSON.parse(r.response));});\n>> {info: \"the agent profile\"}\n\nADL.XAPIWrapper.deleteAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                        \"agentprofile\");\n>> XMLHttpRequest {statusText: \"NO CONTENT\", status: 204, response: \"\", responseType: \"\", responseXML: null…}\n\nADL.XAPIWrapper.getAgentProfile({\"mbox\":\"mailto:tom@example.com\"},\n                                 \"agentprofile\");\n>> 404\n```\n\n## Contributing to the project\nWe welcome contributions to this project. Fork this repository,\nmake changes, [re-minify](https://github.com/adlnet/xAPIWrapper#building-the-project), and submit pull requests. If you're not comfortable\nwith editing the code, please [submit an issue](https://github.com/adlnet/xAPIWrapper/issues) and we'll be happy\nto address it.\n\n## License\n   Copyright &copy;2016 Advanced Distributed Learning\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/adlnet/xAPIWrapper.git"
  },
  "scripts": {
    "build-watch": "grunt watch",
    "coverage": "istanbul cover node_modules/.bin/_mocha --  -R spec test/tests/*"
  },
  "version": "1.11.0"
}
